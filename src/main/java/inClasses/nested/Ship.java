package inClasses.nested;

public class Ship {

    // Вложенные (nested) классы.

    // Если не существует жесткой необходимости в связи объекта внутреннего класса с объектом внешнего класса,
    // то есть смысл сделать такой класс статическим. Вложенный класс логически связан с классом-владельцем, но м.б. использован независимо от него

    // 1) Если класс вложен в интерфейс, то он по умолчанию статический. Такой класс способен наследовать другие классы,
    // реализовывать интерфейсы и являться объектом наследования для любого класса, обладающего необходимыми правами доступа.

    // 2) Статический вложенный класс для доступа к нестатическим членам и методам класса-владельца должен создать объект внешнего класса.
    // А напрямую имеет доступ только к статическим полям и методам внешнего класса.

    // 3) !!! Для создания объекта вложенного класса объект внешнего класса создавать нет необходимости.

    // 4) Подкласс вложенного класса НЕ способен унаследовать возможность доступа к членам внешнего класса, которыми наделен его суперкласс.

    private int id;

    public  void testing(){
        System.out.println("test!!!!!!");
        LifeBoat.down();
        LifeBoat lifeBoat = new LifeBoat();
        lifeBoat.swim();
    }

    public static class LifeBoat {
        private int boatId;

        public static void down(){
            System.out.println("Шлюпки на воду!");
        }

        public void swim(){
            System.out.println("Отплытие шлюпки");

   // 5) Статический вложенный класс для доступа к НЕстатическим членам и методам внешнего класса должен создавать объект внешнего класса
            Ship ship = new Ship();
          //  ship.testing();
        }
    }

    public static void main(String[] args) {
       // 6) Статический метод вложенного класса выхывается при указании полного относительного аути к нему.
        //  Вызов статического метода
        Ship.LifeBoat.down();

        // Создание объекта статического класса
        Ship.LifeBoat lifeBoat = new Ship.LifeBoat();
        // Вызов обычного метода (нужно создать объект)
        lifeBoat.swim();

        // 7) Вложенный класс имеет доступ к статическим полям и методам внешнего класса

    }


}
