package inClasses.inner;

public class Ship {

    // Внутренние (inner) классы - нестатические вложенные классы.
    // 1) Доступ к элементам внутреннего класса возможен из внешнего только через объект внутреннего класса,
    // который должен быть создан в коде метода внешнего класса;

    // 2) Внутреннему классу необязательно быть полем класса владельца;

    // 3) Внутренний класс м. б. использован любым членом своего внешнего класса, а м. и не использоваться вовсе.

    // 4) Использование объекта внутреннего класса ВНЕ своего внешнего класс возможно только при наличии доступа (видимости) и при объявлении ссылки в виде:
    // Ship.Engine obj = new Ship().new Engine();

    // 5) Методы внутреннего класса имеют прямой доступ ко всем полям и методам внешнего класса;

    // 6) Внешний класс может получить доступ к содержимому внутреннего класса только после создания объекта внутреннего класса.

    // 7) Внутренние классы не могут содержать статические атрибуты и методы, кроме констант (final static);

    // 8) !!! Если внутренний класс наследуется обычным образом другим классом (после extends указывается ИмяВнешКласса.ИмяВнутКласса),
    // то он теряет доступ к полям своего внешнего класса, в котором был объявлен! Пример:
    // public class Motor extends Ship.Engint {
    //          public Motor(Ship obj)   -- позволит получить доступ к ссылке на внутренний класс Engine
    //                 obj.super();}}


    // поля, конструкторы
        private Engine engine;

    // abstract, final, private, protected
    private class Engine {       // определение внутреннего (inner) класса
        // поля, методы
        private void launch (){
            System.out.println("Запуск двигателя!");
        }
    } // конец объявления внутреннего класа

    private final void init(){
        engine = new Engine();
        engine.launch();
    }

    public static void main(String[] args) {
        Ship ship = new Ship();
        ship.init();

        Ship.Engine obj = new Ship().new Engine();
        obj.launch();
    }
}
