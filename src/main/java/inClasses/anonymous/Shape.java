package inClasses.anonymous;

public enum Shape {

    // Анонминые (anonymous) классы

    // Применяются для придания уникальной функциональности отдельно взятому экземпляру, для обработки событий,
    // реализации блоков прослушивания, реализации интерфейсов, запуска потоков и т.д.

    // Можно объявить анонимный класс, который будет расширять другой класс или реализовывать интерфейс при объявлении одного-единственного
    // объекта, когда !!! остальным объектам этого класса будет соответствовать реализация метода определенная в самом классе.

    // ех. для создания собственных методов у объекта

    // 1) Объявление анонимного класса осущ=ся одновременно с созданием его объекта посредством опреатора new
    // 2) Конструктор анонимного класса определить НЕВОЗМОЖНО.

    // 3) !!! Для перечисления объявление анонимного внутреннего класса выглядит несколько иначе, т.к. инициализация всех элементов
    // происходит при первом обращении к типу. Поэтому и анонимный класс реализуется только внутри объявления типа enum

    RECTANGLE,
    SQUARE,
    TRIANGLE { //анонимный класс

        public double computeSquare() { // версия для TRIANGLE
            return this.getA() * this.getB() / 2;
        }
    };

    private double a;
    private double b;

    public double getA() {
        return a;
    }

    public double getB() {
        return b;
    }

    public void setShape(double a, double b) {
        if ((a <= 0 || b <= 0) || a != b && this == SQUARE) {
            throw new IllegalArgumentException();
        }
        this.a = a;
        this.b = b;
    }

    public double computeSquare() { // Версия для RECTANGLE и SQUARE
        return a*b;
}

    @Override
    public String toString() {
        return name() + "-> a=" + a + ", b=" + b;
    }



}
