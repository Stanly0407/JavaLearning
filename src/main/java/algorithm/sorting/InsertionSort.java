package algorithm.sorting;

public class InsertionSort {

    // Сортировка вставками
    // Этот алгоритм разделяет оригинальный массив на сортированный и несортированный подмассивы.
    // Длина сортированной части равна 1 в начале и соответствует первому (левому) элементу в массиве.
    // После этого остается итерировать массив и расширять отсортированную часть массива одним элементом с каждой новой итерацией.

    // После расширения новый элемент помещается на свое место в отсортированном подмассиве.
    // Это происходит путём сдвига всех элементов вправо, пока не встретится элемент, который не нужно двигать.

    // В приведенном ниже массиве жирная часть отсортирована в порядке возрастания. Посмотрите что произойдет в этом случае:

    // 3 5 7 8 4 2 1 9 6: выбираем 4 и помним, что это элемент, который нужно вставить. 8 > 4, поэтому сдвигаем.
    // 3 5 7 x 8 2 1 9 6: здесь x – нерешающее значение, так как элемент будет перезаписан (на 4, если это подходящее место,
    // или на 7, если смещение). 7 > 4, поэтому сдвигаемся.
    // 3 5 x 7 8 2 1 9 6
    // 3 x 5 7 8 2 1 9 6
    // 3 4 5 7 8 2 1 9 6
    // Теперь вы видите, что отсортированная часть дополнилась элементом.
    // Каждая следующая итерация делает то же самое, и к концу вы получите отсортированный массив!

    public static void insertionSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            int current = array[i];
            int j = i - 1;
            while(j >= 0 && current < array[j]) {
                array[j+1] = array[j];
                j--;
            }
            // в этой точке мы вышли, так что j так же -1
            // или в первом элементе, где текущий >= a[j]
            array[j+1] = current;
        }
    }

    // Временная сложность
    // Вернемся к худшему сценарию – к массиву, отсортированному в убывающем порядке.
    // В этом случае каждая итерация сдвигает отсортированный массив на единицу O(n).
    // Придется делать это для каждого элемента в каждом массиве, что приведет к сложности равной O(n ^ 2).

}
