package algorithm.sorting;

import java.util.Arrays;

public class BubbleSorter {

    //Сортировка пузырьком
    //Идея пузырьковой сортировки: шаг сортировки состоит в проходе снизу вверх по массиву.
    // По пути просматриваются пары соседних элементов. Если элементы некоторой пары находятся в неправильном порядке,
    // то меняем их местами.

    // В результате нулевого прохода минимальный элемент "всплывает" вверх - отсюда и название алгоритма - сортировка пузырьком.
    // Повторяем алгоритм для всех элементов, кроме нулевого - он уже находится на своем месте. И находим второй по величине элемент.
    // Повторяем алгоритм, пока элементы не будут отсортированы.


    // Внешний цикл for отвечает за номер прохода, а внутренний - за перебор элементов в одном проходе.
    // Обмен значений производится с помощью временной переменной tmp. Во внутреннем цикле перебираем значения начиная
    // с последнего (array.length - 1) и в каждом следующем проходе уменьшаем количество просмотренных элементов (j > i).
    public static void sort(int[] array) {
        // i - номер прохода
        for (int i = 0; i < array.length - 1; i++) {
            // внутренний цикл прохода
            for (int j = array.length - 1; j > i; j--) {
                if (array[j - 1] > array[j]) {
                    int tmp = array[j - 1];
                    array[j - 1] = array[j];
                    array[j] = tmp;
                }
            }
        }
    }
// Будем вызывать метод BubbleSorter.sort() из класса BubbleSorterTest, приведенного ниже. Отсортируем каждую строку многомерного массива data:
    public static void main(String[] args) {
        int[][] data = {
                {},
                {1},
                {0, 3, 2, 1},
                {4, 3, 2, 1, 0},
                {6, 8, 3, 123, 5, 4, 1, 2, 0, 9, 7},
        };
        for (int[] arr : data) {
            System.out.print(Arrays.toString(arr) + " => ");
            BubbleSorter.sort(arr);
            System.out.println(Arrays.toString(arr));
        }
    }


    // Так как мы используем цикл в цикле, получается, что сложность нашего алгоритма увеличивается.
    // При n элементах она становится n * n, то есть O(n^2). Такая сложность называется квадратичной.
    // Как мы понимаем, мы не можем точно знать, сколько понадобится итераций.
    // Показатель сложности алгоритма служит цели показать тенденцию роста сложности, худший случай.
    // Насколько сильно будет увеличиваться время работы при изменении количества элементов n.


}
